{"version":3,"sources":["components/PageHeader.js","components/CardBody.js","components/EmployeeCard.js","components/DropdownButton.js","components/ListControls.js","utils/API.js","components/EmployeeContainer.js","App.js","serviceWorker.js","index.js"],"names":["PageHeader","className","CardBody","employee","style","listStyleType","email","phone","EmployeeCard","props","employees","filter","name","first","last","includes","map","i","key","src","picture","large","DropdownButton","id","onChange","setSort","value","ListControls","type","setFilter","placeholder","axios","get","EmployeeContainer","state","filterBy","findEmployees","API","then","res","setState","data","results","target","catch","err","console","log","e","compare","a","b","nameA","toLowerCase","nameB","comparison","sort","reverse","reset","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ed2e61c0.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction PageHeader() {\n  return (\n    <h1 className=\"jumbotron text-center\">Employee Directory</h1>\n  )\n}\n\nexport default PageHeader;","import React from \"react\";\n\nfunction CardBody({ employee }) {\n  return (\n    <ul className=\"card-text\" style={{listStyleType: \"none\"}}>\n      <li>email: {employee.email}</li>\n      <li>phone: {employee.phone}</li>\n    </ul>\n  )\n}\n\nexport default CardBody;","import React from \"react\";\nimport CardBody from \"./CardBody\";\n\nfunction EmployeeCard(props) {\n  return (\n    <div className=\"row\">\n      {props.employees.filter(employee => `${employee.name.first} ${employee.name.last}`.includes(props.filter)).map((employee, i) => (\n        <div className=\"card col-4\" key={i}>\n          <img className=\"card-img-top\" src={employee.picture.large} />\n          <h5 className=\"card-title text-center\">{`${employee.name.last}, ${employee.name.first}`}</h5>\n          <CardBody employee={employee} />\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default EmployeeCard;","import React from \"react\";\n\nfunction DropdownButton(props) {\n  return (\n    <div className=\"col-6\">\n      <label className=\"col-2\">Sort By:</label>\n      <select className=\"col-4\" name=\"sort\" id=\"sort\" onChange={props.setSort}>\n        <option value=\"laz\">Last Name A-Z</option>\n        <option value=\"lza\">Last Name Z-A</option>\n        <option value=\"faz\">First Name A-Z</option>\n        <option value=\"fza\">First Name Z-A</option>\n        </select>\n    </div>\n  )\n}\n\nexport default DropdownButton;","import React from \"react\";\nimport DropdownButton from \"./DropdownButton\";\n\nfunction ListControls(props) {\n  return (\n    <div className=\"row\">\n      <div className=\"col-3\"></div>\n      <input id=\"search\" type=\"search\" className=\"col-3\" onChange={props.setFilter}  placeholder=\"Name Search\"/>\n      <DropdownButton setSort={props.setSort}/>\n    </div>\n  )\n}\n\nexport default ListControls;","import axios from \"axios\";\n\nconst URL = \"https://randomuser.me/api/?results=200&nat=us\";\n\n// Export an object with a \"search\" method that searches the Giphy API for the passed query\nexport default {\n  search: function() {\n    return axios.get(URL);\n  }\n};\n","import React, { Component } from \"react\";\nimport EmployeeCard from \"./EmployeeCard\";\nimport ListControls from \"./ListControls\";\nimport API from \"../utils/API\";\n\nclass EmployeeContainer extends Component {\n  state = {\n    employees: [],\n    filterBy: \"\"\n  }\n\n  componentDidMount() {\n    this.findEmployees();\n\n  }\n\n  findEmployees = () => {\n    API.search()\n      .then(res => {\n        this.setState({\n          employees: res.data.results\n        })\n        this.setSort({ target: { value: \"laz\" } });\n      })\n      .catch(err => console.log(err));\n  }\n\n  setSort = e => {\n    let type = \"\";\n    const compare = (a, b) => {\n      const nameA = a.name[type].toLowerCase();\n      const nameB = b.name[type].toLowerCase();\n\n      let comparison = 0;\n      if (nameA > nameB) {\n        comparison = 1;\n      } else if (nameA < nameB) {\n        comparison = -1;\n      }\n      return comparison;\n    }\n    if (e.target.value === \"laz\") {\n      type = \"last\";\n      this.setState({\n        employees: this.state.employees.sort(compare)\n      });\n    }\n    if (e.target.value === \"lza\") {\n      type = \"last\";\n      this.setState({\n        employees: this.state.employees.sort(compare)\n      });\n      this.setState({\n        employees: this.state.employees.reverse()\n      });\n    }\n    if (e.target.value === \"faz\") {\n      type = \"first\";\n      this.setState({\n        employees: this.state.employees.sort(compare)\n      });\n    }\n    if (e.target.value === \"fza\") {\n      type = \"first\";\n      this.setState({\n        employees: this.state.employees.sort(compare)\n      });\n      this.setState({\n        employees: this.state.employees.reverse()\n      });\n    }\n  }\n\n  setFilter = e => {\n    this.setState({\n      filterBy: e.target.value\n    });\n  }\n\n  reset = () => {\n    this.setState({\n      filterBy: \"\"\n    });\n    this.setSort({ target: { value: \"laz\" } });\n    \n  }\n\n  render() {\n    return (\n      <div>\n        <ListControls reset={this.reset} setSort={this.setSort} setFilter={this.setFilter} />\n        <EmployeeCard filter={this.state.filterBy} employees={this.state.employees} />\n      </div>\n    )\n  }\n}\n\nexport default EmployeeContainer;","import './App.css';\nimport React from 'react';\nimport PageHeader from './components/PageHeader';\nimport EmployeeContainer from './components/EmployeeContainer';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <PageHeader />\n      <EmployeeContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}